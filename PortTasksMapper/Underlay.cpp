#include "Underlay.h"

const UnderlayColor underlayColors[] = {
	 {0, 0x282820},
	 {1, 0xB7D49A},
	 {2, 0xA99FE0},
	 {3, 0xFC49AA},
	 {4, 0x604040},
	 {5, 0x302020},
	 {6, 0x906830},
	 {7, 0x383830},
	 {8, 0x7A7880},
	 {9, 0x282018},
	 {10, 0x504840},
	 {11, 0x484038},
	 {12, 0x807048},
	 {13, 0x584828},
	 {14, 0x383828},
	 {15, 0x828B9F},
	 {16, 0x003838},
	 {17, 0x7296B7},
	 {18, 0x303525},
	 {19, 0x788868},
	 {20, 0x803060},
	 {21, 0x873968},
	 {22, 0x6050A8},
	 {23, 0x282848},
	 {24, 0x183018},
	 {25, 0xB09058},
	 {26, 0x191919},
	 {27, 0x601880},
	 {28, 0x202018},
	 {29, 0x304040},
	 {30, 0x688080},
	 {31, 0x818173},
	 {32, 0x29380F},
	 {33, 0x20250A},
	 {34, 0x1C1813},
	 {35, 0xB89B67},
	 {36, 0x4B3E14},
	 {37, 0x3D2B0B},
	 {38, 0x38422F},
	 {39, 0x35720A},
	 {40, 0x78673F},
	 {41, 0x90754B},
	 {42, 0x765A3D},
	 {43, 0x352A3D},
	 {44, 0x4F4A53},
	 {45, 0x1B1222},
	 {46, 0x1B2233},
	 {47, 0x35720A},
	 {48, 0x58680B},
	 {49, 0x78680B},
	 {50, 0x6CAC10},
	 {51, 0x819531},
	 {52, 0x55520A},
	 {53, 0x125841},
	 {54, 0x767676},
	 {55, 0x4D4D4D},
	 {56, 0x2E2E2E},
	 {57, 0xEEEEEE},
	 {58, 0xD1D6E7},
	 {59, 0xD1E7D6},
	 {60, 0xB19A3D},
	 {61, 0xD0C074},
	 {62, 0x3D2B0B},
	 {63, 0x644E1E},
	 {64, 0x654D0B},
	 {65, 0x663300},
	 {66, 0x664411},
	 {67, 0xCBBA76},
	 {68, 0x644E1E},
	 {69, 0x654D0B},
	 {70, 0x663300},
	 {71, 0x030303},
	 {72, 0x557799},
	 {73, 0x995566},
	 {74, 0x557799},
	 {75, 0x0A1122},
	 {76, 0xFE0000},
	 {77, 0xD9BB93},
	 {78, 0x7D7D57},
	 {79, 0x666547},
	 {80, 0x8F8E4D},
	 {81, 0x75743F},
	 {82, 0x9C9B6C},
	 {83, 0x78875E},
	 {84, 0x5F6A4A},
	 {85, 0xC8B9AE},
	 {86, 0x76B8AF},
	 {87, 0x1B6F88},
	 {88, 0x083245},
	 {89, 0x85665F},
	 {90, 0x9B664E},
	 {91, 0x5C5444},
	 {92, 0x38562F},
	 {93, 0x464034},
	 {94, 0x3E6995},
	 {95, 0x4B3E14},
	 {96, 0x5C543C},
	 {97, 0x2F2B1F},
	 {98, 0x276D27},
	 {99, 0x396215},
	 {100, 0x705650},
	 {101, 0x665F47},
	 {102, 0x111E1A},
	 {103, 0x343B4B},
	 {104, 0x212A3E},
	 {105, 0x0A1122},
	 {106, 0x2B3344},
	 {107, 0x273043},
	 {108, 0x958B67},
	 {109, 0x7D7657},
	 {110, 0x666666},
	 {111, 0x333333},
	 {112, 0x2B2E2D},
	 {113, 0x64BB75},
	 {114, 0x33501E},
	 {115, 0x71155C},
	 {116, 0x665F47},
	 {117, 0x752222},
	 {118, 0x75624E},
	 {119, 0x726B4F},
	 {120, 0x603028},
	 {121, 0x300000},
	 {122, 0x312D21},
	 {123, 0xB8B098},
	 {124, 0xA59E89},
	 {125, 0x946B03},
	 {126, 0x474231},
	 {127, 0x312D21},
	 {128, 0x827944},
	 {129, 0x403B2C},
	 {130, 0x312C21},
	 {131, 0x1C1B14},
	 {132, 0x2A3B1B},
	 {133, 0x077156},
	 {134, 0x3A462E},
	 {135, 0x3B3E45},
	 {136, 0x31363A},
	 {137, 0xC08048},
	 {138, 0x000000},
	 {139, 0xA8A098},
	 {140, 0x3C2823},
	 {141, 0xDDA6DD},
	 {142, 0x50A0B8},
	 {143, 0x005868},
	 {144, 0x404040},
	 {145, 0x383838},
	 {146, 0x303030},
	 {147, 0x282828},
	 {148, 0x202020},
	 {149, 0x181818},
	 {150, 0xFFFFFF},
	 {151, 0x7C6861},
	 {152, 0x484746},
	 {153, 0x7B7978},
	 {154, 0x4E2C2A},
	 {155, 0xD9BF93},
	 {156, 0x99A5A5},
	 {157, 0x4D5757},
	 {158, 0xC9CFCF},
	 {159, 0x6F7D7D},
	 {160, 0x4A5253},
	 {161, 0x2D4A53},
	 {162, 0x243C43},
	 {163, 0x19353D},
	 {164, 0x102D36},
	 {165, 0x08242C},
	 {166, 0x30120E},
	 {167, 0x391915},
	 {168, 0x4E2F2C},
	 {169, 0x280505},
	 {170, 0x54534D},
	 {171, 0x716F6A},
	 {172, 0x97958A},
	 {173, 0x908180},
	 {174, 0x443D3C},
	 {175, 0x3E2B21},
	 {176, 0xA37F58},
	 {177, 0x6B5839},
	 {178, 0x534E4A},
	 {179, 0x242433},
	 {180, 0x18192D},
	 {181, 0x121322},
	 {182, 0x090912},
	 {183, 0x4A534E},
	 {184, 0x855648},
	 {185, 0x9E6755},
	 {186, 0x6B4539},
	 {187, 0xA37158},
	 {188, 0x383C39},
	 {189, 0x303030},
	 {190, 0x4C5950},
	 {191, 0x5E7364},
	 {192, 0x617E69},
	 {193, 0x7F9A86},
	 {194, 0x8BA692},
	 {195, 0xAAAAAA},
	 {196, 0x444444},
	 {197, 0x3D2B0B},
	 {198, 0x836A44},
	 {199, 0xA07048},
	 {200, 0x4E3C2A},
	 {201, 0xC0AA86},
	 {202, 0x6F492D},
	 {203, 0x89A1BF},
	 {204, 0x4B658F},
	 {205, 0x253557},
	 {206, 0x7B9FB7},
	 {207, 0x93A5BC},
	 {208, 0x586C8C},
	 {209, 0x333F59},
	 {210, 0x86A2B4},
	 {211, 0x1E1A17},
	 {212, 0x2D2927},
	 {213, 0x383431},
	 {214, 0x48392E},
	 {215, 0xF1F2F3},
	 {216, 0xA28876},
	 {217, 0xE6E6EB},
	 {218, 0x3D3D3D},
	 {219, 0x46463E},
	 {220, 0x46463E},
	 {221, 0x2A2A25},
	 {222, 0xAE9062},
	 {223, 0x48546A},
	 {224, 0x445169},
	 {225, 0x020B2A},
	 {226, 0xF9FAFA},
	 {227, 0x99A5A5},
	 {228, 0x647071},
};


const int underlayColorsCount = sizeof(underlayColors) / sizeof(UnderlayColor);

glm::vec3 getUnderlayRGB(int id)
{
	for (int i = 0; i < underlayColorsCount; ++i)
	{
		const auto& entry = underlayColors[i];
		if (entry.id == id)
		{
			float r = ((entry.rgb >> 16) & 0xFF) / 255.0f;
			float g = ((entry.rgb >> 8) & 0xFF) / 255.0f;
			float b = (entry.rgb & 0xFF) / 255.0f;
			return { r, g, b };
		}
	}
	return { 0.0f, 0.0f, 0.0f };
}

